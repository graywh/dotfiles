#compdef bundle

local curcontext="$curcontext" state line _gems _opts ret=1

_arguments -C -A "-v" -A "--version" \
	'(- 1 *)'{-v,--version}'[display version information]' \
	'1: :->cmds' \
	'*:: :->args' && ret=0

case $state in
	(cmds)
		_values "bundle command" \
			"install[Install the gems specified by the Gemfile or Gemfile.lock]" \
			"update[Update dependencies to their latest versions]" \
			"package[Package the .gem files required by your application]" \
			"exec[Execute a script in the context of the current bundle]" \
			"config[Specify and read configuration options for bundler]" \
			"check[Determine whether the requirements for your application are installed]" \
			"list[Show all of the gems in the current bundle]" \
			"show[Show the source location of a particular gem in the bundle]" \
			"console[Start an IRB session in the context of the current bundle]" \
			"open[Open an installed gem in the editor]" \
			"viz[Generate a visual representation of your dependencies]" \
			"init[Generate a simple Gemfile, placed in the current directory]" \
			"gem[Create a simple gem, suitable for development with bundler]" \
			"help[Describe available tasks or one specific task]" \
			"platform[Displays platform compatibility information]" \
			"outdated[Show all of the outdated gems in the current bundle]"
		ret=0
		;;
	(args)
		case $line[1] in
			(help)
				_arguments \
					'(--no-color)--no-color[disable colorization in output]' \
					'(-V --verbose)'{-V,--verbose}'[enable verbose output mode]'
				_values 'commands' 'install' 'update' 'package' 'exec' 'config' 'check' 'list' 'show' 'console' 'open' 'viz' 'init' 'gem' 'help' 'platform' 'outdated'
				ret=0
				;;
			(check)
				_arguments \
					'(--gemfile)--gemfile=-[use the specified gemfile instead of Gemfile]:gemfile:_files' \
					'(--path)--path=-[specify a different path than the system default]:path:_files' \
					'(--dry-run)--dry-run[lock the Gemfile]' \
					'(--no-color)--no-color[disable colorization in output]' \
					'(-V --verbose)'{-V,--verbose}'[enable verbose output mode]'
				ret=0
				;;
			(exec)
				_normal && ret=0
				;;
			(gem)
				_arguments \
					'(-b --bin)'{-b,--bin}'[generate a binary for your library]' \
					'(-t --test)'{-t,--test}'[generate a test directory for your library]' \
					'(-e --edit)'{-e,--edit}'=-[path to your editor]:editor:_files' \
					'(--no-color)--no-color[disable colorization in output]' \
					'(-V --verbose)'{-V,--verbose}'[enable verbose output mode]'
				ret=0
				;;
			(install)
				_arguments \
					'(--no-color)--no-color[disable colorization in output]' \
					'(--local)--local[do not attempt to connect to rubygems.org]' \
					'(--quiet)--quiet[only output warnings and errors]' \
					'(--gemfile)--gemfile=-[use the specified gemfile instead of Gemfile]:gemfile:_files' \
					'(--system)--system[install to the system location]' \
					'(--deployment)--deployment[install using defaults tuned for deployment environments]' \
					'(--frozen)--frozen[do not allow the Gemfile.lock to be updated after this install]' \
					'(--path)--path=-[specify a different path than the system default]:path:_files' \
					'(--binstubs)--binstubs=-[generate bin stubs for bundled gems to ./bin]:directory:_files' \
					'(--without)--without=-[exclude gems that are part of the specified named group]:groups'
				ret=0
				;;
			(list|show)
				_arguments \
					'(- :)--paths[list the paths of all gems that are required by your Gemfile]'
				_gems=( $(bundle show 2> /dev/null | sed -e '/^  \*/!d; s/^  \* \([^ ]*\) .*/\1/') )
				if [[ $_gems != "" ]]; then
					_values 'gems' $_gems
				fi
				ret=0
				;;
			(open)
				_gems=( $(bundle show 2> /dev/null | sed -e '/^  \*/!d; s/^  \* \([^ ]*\) .*/\1/') )
				if [[ $_gems != "" ]]; then
					_values 'gems' $_gems
				fi
				ret=0
				;;
			(outdated)
				_arguments \
					'(--pre)--pre[check for newer pre-release gems]' \
					'(--source)--source=-[check against a specific source]:source' \
					'(--local)--local[do not attempt to fetch gems remotely and use the gem cache instead]' \
					'(--no-color)--no-color[disable colorization in output]' \
					'(-V --verbose)'{-V,--verbose}'[enable verbose output mode]'
				_gems=( $(bundle show 2> /dev/null | sed -e '/^  \*/!d; s/^  \* \([^ ]*\) .*/\1/') )
				if [[ $_gems != "" ]]; then
					_values 'gems' $_gems
				fi
				ret=0
				;;
			(platform)
				_arguments \
					'(--ruby)--ruby[just display the ruby directive information]'
				ret=0
				;;
			(update)
				_arguments \
					'(--source)--source=-[check against a specific source]:source'
				_gems=( $(bundle show 2> /dev/null | sed -e '/^  \*/!d; s/^  \* \([^ ]*\) .*/\1/') )
				if [[ $_gems != "" ]]; then
					_values 'gems' $_gems
				fi
				ret=0
				;;
			(viz)
				_arguments \
					'(-f --file)'{-f,--file}'=-[the name to use for the generated file]:file:_files' \
					'(-v --version)'{-v,--version}'[set to show each gem version]' \
					'(-r --requirements)'{-r,--requirements}'[set to show the version of each required dependency]' \
                                        '(-F --format)'{-F,--format}'=-[output format]:format:(png jpg svg dot)' \
					'(--no-color)--no-color[disable colorization in output]' \
					'(-V --verbose)'{-V,--verbose}'[enable verbose output mode]'
				ret=0
				;;
		esac
		;;
esac

return ret
